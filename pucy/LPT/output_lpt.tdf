TITLE "Uk³ad wyjœciowy portu LPT";

include "u2tobcd.inc";

constant addr = B"00000000";

subdesign output_lpt(
	LPT_GEN : input;	%Zegar ok. 20 MHz%
	LPT_CR : input;
	
	LPT_DATA[7..0] : input;
	LPT_ADDR[7..0] : input;
	LPT_IOREQ : input;
	LPT_RD : input;
	LPT_WR : input;
	LPT_WT : output;

	LPT_OUT_DATA[7..0] : output;
	LPT_BUSY : input;
	LPT_ACK : input;
	LPT_STROBE : output;
	LPT_SELECTLN : output;
	LPT_SEL : input;
	LPT_INIT : output;
	LPT_AUTOFD : output;
)
variable
	LPT_OUT_DATA[7..0] : DFF;
	LPT_STROBE : DFF;
	LPT_SELECTLN : DFF;
	LPT_INIT : DFF;
	LPT_AUTOFD : DFF;
	
	CNT[3..0] : DFF;
	NUM[2..0] : DFF;

	AUT : machine of bits (Q[2..0])
			with states (S0=0, S1=1, S2=2, S3=3, S4=4, S5=5);
			
	BCD_MOD : u2tobcd;
	SIGN : DFF;
	HUNDS[1..0] : DFF;
	TENS[3..0] : DFF;
	UNITS[3..0] : DFF;
	

begin
	LPT_OUT_DATA[].clk = LPT_GEN;
	LPT_STROBE.clk = LPT_GEN;
	LPT_SELECTLN.clk = LPT_GEN;
	LPT_INIT.clk = LPT_GEN;
	LPT_AUTOFD.clk = LPT_GEN;
	CNT[].clk = LPT_GEN;

	LPT_OUT_DATA[].clrn = LPT_CR;
	LPT_STROBE.clrn = LPT_CR;
	LPT_SELECTLN.clrn = LPT_CR;
	LPT_INIT.clrn = LPT_CR;
	LPT_AUTOFD.clrn = LPT_CR;
	CNT[].clrn = LPT_CR;
	
	NUM[].clk = LPT_GEN;
	NUM[].clrn = LPT_CR;
	
	SIGN.clk = LPT_GEN;
	HUNDS[].clk = LPT_GEN;
	TENS[].clk = LPT_GEN;
	UNITS[].clk = LPT_GEN;

	SIGN.clrn = LPT_CR;
	HUNDS[].clrn = LPT_CR;
	TENS[].clrn = LPT_CR;
	UNITS[].clrn = LPT_CR;

	AUT.clk = LPT_GEN;
	AUT.reset = !LPT_CR;
	

	LPT_SELECTLN = GND;
	LPT_AUTOFD   = GND;
	LPT_INIT     = VCC;
	

	BCD_MOD.GEN = LPT_GEN;

	case (AUT) is
		%Czekamy na wystawienie adresu i danych na szynê%
		when S0 =>	
			CNT[] = 0; 
			LPT_OUT_DATA[] = 0; 
			NUM[] = 0;
			LPT_STROBE = VCC;
			
			% Sprawdzamy, czy wybrano nasze urzadzenie %
			if(!LPT_IOREQ & !LPT_WR & (LPT_ADDR[] == addr)) then
				LPT_WT = VCC;
				BCD_MOD.COUNT = VCC;						
				BCD_MOD.DATA[] = LPT_DATA[];
				
				if(BCD_MOD.WT) then
					AUT = S0;
				else
					SIGN = BCD_MOD.SIGN;
					HUNDS[] = BCD_MOD.HUNDS[];
					TENS[] = BCD_MOD.TENS[];
					UNITS[] = BCD_MOD.UNITS[];
					
					% Czekamy, a¿ drukarka bêdzie gotowa (ACK = 1, BUSY = 0) %
					if ( (!LPT_BUSY) and LPT_ACK) then
						AUT = S1;
					else
						AUT = S0;
					end if;
					
				end if;
			else
				LPT_WT = GND;
				AUT = S0;
			end if;

		when S1	=>	
			LPT_STROBE = VCC; 
			LPT_WT = VCC;
			SIGN = SIGN; 
			HUNDS[] = HUNDS[]; 
			TENS[] = TENS[]; 
			UNITS[] = UNITS[];
			CNT[] = CNT[];	
			
			case (NUM[]) is
				when 0 	=> 	if(SIGN) then %drukuj znak liczby +/-%
								LPT_OUT_DATA[] = 45; 
							else
								LPT_OUT_DATA[] = 43; 
							end if;										 
							NUM[] = 1;
							AUT = S2;
				when 1 	=> 	LPT_OUT_DATA[] = (B"000000", HUNDS[]) + 48;
							AUT = S2;
							NUM[] = 2;
				when 2 	=> 	LPT_OUT_DATA[] = (B"0000", TENS[]) + 48;
							AUT = S2;
							NUM[] = 3;
				when 3	=>	LPT_OUT_DATA[] = (B"0000", UNITS[]) + 48;
							NUM[] = 4;
							AUT = S2;
				when 4 	=>	LPT_OUT_DATA[] = 13;
							NUM[] = 5;
							AUT = S2;
				when 5	=>	LPT_OUT_DATA[] = 10;
							AUT = S2;
							NUM[] = 6;
			end case;
			
		%Opuszczamy STROBE na 500 ns%
		when S2	=>
			LPT_STROBE = GND; 
			LPT_WT = VCC;
			
			SIGN = SIGN; 
			HUNDS[] = HUNDS[]; 
			TENS[] = TENS[]; 
			UNITS[] = UNITS[];
			
			LPT_OUT_DATA[] = LPT_OUT_DATA[];
			NUM[] = NUM[];
			
			if ( CNT[] < 10) then 
				AUT = S2;
				CNT[] = CNT[] + 1; 
			else 
				AUT = S3;
				CNT[] = 0;
			end if;
			
		% sprawdzamy, czy BUSY zosta³o podniesione %
		when S3	=>	
			LPT_STROBE = GND; 
			LPT_WT = VCC;
			SIGN = SIGN; 
			HUNDS[] = HUNDS[]; 
			TENS[] = TENS[]; 
			UNITS[] = UNITS[];
			CNT[] = CNT[];	
			
			LPT_OUT_DATA[] = LPT_OUT_DATA[];
			NUM[] = NUM[];
			
			if (!LPT_BUSY) then
				AUT = S3;
			else 
				AUT = S4;
			end if;
			
		% Podnosimy STROBE i czekamy, na zdjêcie BUSY%
		
		when S4	=>	
			LPT_STROBE = VCC; 
			LPT_WT = VCC;
			
			SIGN = SIGN; 
			HUNDS[] = HUNDS[]; 
			TENS[] = TENS[]; 
			UNITS[] = UNITS[];
			CNT[] = 0;
			
			LPT_OUT_DATA[] = LPT_OUT_DATA[];
			NUM[] = NUM[];
			
			if (LPT_BUSY) then 
				AUT = S4;
			else 
				AUT = S5;
			end if;
		when S5	=>	
			LPT_STROBE = VCC;
			
			SIGN = SIGN; 
			HUNDS[] = HUNDS[]; 
			TENS[] = TENS[]; 
			UNITS[] = UNITS[];
			CNT[] = 0;
			
			LPT_OUT_DATA[] = LPT_OUT_DATA[];
			NUM[] = NUM[];
					
			% Sprawdzamy, czy wys³aliœmy wszystkie znaki %
			if(NUM[] == 6)then
				LPT_WT = GND;
				
				if (!LPT_IOREQ) then
					AUT = S5;
				else
					AUT = S0;							
				end if;
			else
				LPT_WT = VCC;
				AUT = S1;
			end if;
	end case;


end;