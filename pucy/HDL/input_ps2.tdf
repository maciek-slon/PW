TITLE "Uk³ad wejœciowy mikroprocesoara - PS2";

constant addr = B"11111111";


subdesign input_ps2(
	PS2_DATA[7..0] : bidir;	%Szyna danych %
	PS2_GEN : input;	%Zegar ok. 20 MHz%
	PS2_CR : input;
	
	
	PS2_ADDR[7..0] : input;
	PS2_IOREQ : input;
	PS2_RD : input;
	PS2_WR : input;
	PS2_WT : output;

	
	PS2_IN_DATA : input;	%Dane przychodz¹ce z ³¹cza PS2 %
	PS2_IN_CLK : input;		%Sygna³ synchornizuj¹cy przychodz¹ce dane %

)

variable
	AUT : machine of bits (Q[3..0]) %Automat obs³uguj¹cy komunikacjê%
			with states (START = 0, S0 = 1, S1 = 2, S2 = 3, S3 = 4, S4 = 5, S5 = 6, S6 = 7, S7 = 8);
	DATA[7..0] : DFF;	%Dane ca³kowicie odczytane z portu%
	REJ[7..0] : DFF;	%Dane odczytywane z portu%
	PAR : DFF;			%Badanie parzystoœci%
	
	--PS2_DATA[7..0] : DFF;	
	TMP_DATA[7..0] : DFF;

	PS2_CLK : DFF;
	CNT[3..0] : DFF;	%Licznik iloœci odczytancyh bitów%
	OK : DFF;			%Czy dane s¹ poprawne%
	SH : DFF; %czy wyswietlono%
	
	NUM[1..0] : DFF;
	READ : DFF;
	OUT[7..0] : DFF;
	TCNT[2..0] : DFF;
	SIGN : DFF;

begin

	%Podpiêcie zegara do poszczególnych elementów%
	DATA[].clk = PS2_GEN;
	REJ[].clk = PS2_GEN;
	PS2_CLK.clk = PS2_GEN;
	CNT[].clk= PS2_GEN;
	AUT.clk = PS2_GEN;
	PAR.clk = PS2_GEN;
	OK.clk = PS2_GEN;
	SH.clk = OK;
	READ.clk = PS2_GEN;
	OUT[].clk = PS2_GEN;
	TCNT[].clk = PS2_GEN;
	SIGN.clk = PS2_GEN;
	--TMP_DATA[].clk = PS2_GEN;
	
	
	%Podpiêcie sygna³u resetu%
	DATA[].clrn = PS2_CR;
	REJ[].clrn = PS2_CR;
	PS2_CLK.clrn = PS2_CR;
	CNT[].clrn = PS2_CR;
	PAR.clrn = PS2_CR;
	AUT.reset = !PS2_CR;
	OK.clrn = PS2_CR;
	SH.clrn = PS2_CR;
	READ.clrn = PS2_CR;
	OUT[].clrn = PS2_CR;
	TCNT[].clrn = PS2_CR;
	SIGN.clrn = PS2_CR;
	TMP_DATA[] = PS2_CR;
	
	SH = !SH;

	--PS2_DATA[].clk = PS2_GEN;

	NUM[].clk = PS2_GEN;

	--PS2_DATA[].clrn = PS2_CR;

	NUM[].clrn = PS2_CR;	
	
	
	PS2_CLK = PS2_IN_CLK;

	
	PS2_DATA[0] = TRI(TMP_DATA[0], !PS2_IOREQ & !PS2_RD & (PS2_ADDR[] == addr) );
	PS2_DATA[1] = TRI(TMP_DATA[1], !PS2_IOREQ & !PS2_RD & (PS2_ADDR[] == addr));
	PS2_DATA[2] = TRI(TMP_DATA[2], !PS2_IOREQ & !PS2_RD & (PS2_ADDR[] == addr));
	PS2_DATA[3] = TRI(TMP_DATA[3], !PS2_IOREQ & !PS2_RD & (PS2_ADDR[] == addr));
	PS2_DATA[4] = TRI(TMP_DATA[4], !PS2_IOREQ & !PS2_RD & (PS2_ADDR[] == addr));
	PS2_DATA[5] = TRI(TMP_DATA[5], !PS2_IOREQ & !PS2_RD & (PS2_ADDR[] == addr));
	PS2_DATA[6] = TRI(TMP_DATA[6], !PS2_IOREQ & !PS2_RD & (PS2_ADDR[] == addr));
	PS2_DATA[7] = TRI(TMP_DATA[7], !PS2_IOREQ & !PS2_RD & (PS2_ADDR[] == addr));
	
	case AUT is
		when START => 					
					if(!PS2_IOREQ & !PS2_RD & (PS2_ADDR[] == addr)) then
						PS2_WT = VCC;
						AUT = S0;
					else
						PS2_WT = GND;
						AUT = START;
					end if;
		when S0	=>	TMP_DATA[] = TMP_DATA[]; DATA[] = DATA[]; PAR = GND; CNT[] = 0; REJ[] = 0; OK = OK; READ = READ; OUT[] = OUT[];
					PS2_WT = VCC;
					TCNT[] = TCNT[]; SIGN = SIGN;
					if (!PS2_CLK & !PS2_IN_DATA) then
						OK = GND;
						AUT = S2;
					else AUT = S0;
					end if;
		when S1	=>	TMP_DATA[] = TMP_DATA[]; DATA[] = DATA[]; OK = OK; READ = READ;  OUT[] = OUT[];
					TCNT[] = TCNT[]; SIGN = SIGN; PS2_WT = VCC;
					if(CNT[] < 8) then
						REJ[] = (PS2_IN_DATA, REJ[7..1]);
						PAR = PAR xor PS2_IN_DATA;
						AUT = S2;
					elsif (CNT[] == 8) then
						REJ[] = REj[];
						PAR = PAR xor PS2_IN_DATA;
						AUT = S2;
					elsif (CNT[] == 9) then
						REJ[] = REJ[];
						OK = PAR and PS2_IN_DATA;
						AUT = S4;
					end if;
					CNT[] = CNT[] + 1;	
		when S2	=>	TMP_DATA[] = TMP_DATA[]; DATA[] = DATA[]; PAR = PAR; CNT[] = CNT[]; REJ[] = REJ[]; OK = OK; READ = READ; OUT[] = OUT[];
					TCNT[] = TCNT[]; SIGN = SIGN; PS2_WT = VCC;
					if (PS2_CLK == VCC) then AUT = S3; 
					else AUT = S2; end if;
		when S3	=>	TMP_DATA[] = TMP_DATA[]; DATA[] = DATA[]; PAR = PAR; CNT[] = CNT[]; REJ[] = REJ[]; OK = OK; READ = READ; OUT[] = OUT[];
					TCNT[] = TCNT[]; SIGN = SIGN; PS2_WT = VCC;
					if (PS2_CLK == GND) then AUT = S1;  
					else AUT = S3; end if;
		when S4	=>	TMP_DATA[] = TMP_DATA[]; OK = OK; OUT[] = OUT[]; PS2_WT = VCC;
					if (OK) then
						if (READ) then
							case REJ[] is
								WHEN X"70" => REJ[] = 0; TCNT[] = TCNT[]; SIGN = SIGN;
								WHEN X"69" => REJ[] = 1; TCNT[] = TCNT[]; SIGN = SIGN;
								WHEN X"72" => REJ[] = 2; TCNT[] = TCNT[]; SIGN = SIGN;
								WHEN X"7A" => REJ[] = 3; TCNT[] = TCNT[]; SIGN = SIGN;
								WHEN X"6B" => REJ[] = 4; TCNT[] = TCNT[]; SIGN = SIGN;
								WHEN X"73" => REJ[] = 5; TCNT[] = TCNT[]; SIGN = SIGN;
								WHEN X"74" => REJ[] = 6; TCNT[] = TCNT[]; SIGN = SIGN;
								WHEN X"6C" => REJ[] = 7; TCNT[] = TCNT[]; SIGN = SIGN;
								WHEN X"75" => REJ[] = 8; TCNT[] = TCNT[]; SIGN = SIGN;
								WHEN X"7D" => REJ[] = 9; TCNT[] = TCNT[]; SIGN = SIGN;
								WHEN X"79" => REJ[] = 10; SIGN = GND; TCNT[] = 0;
								WHEN X"7B" => REJ[] = 10; SIGN = VCC; TCNT[] = 0;								
								WHEN OTHERS => REJ[] = 14; TCNT[] = 0; SIGN = SIGN;
							end case;
							AUT = S5;
							READ = GND;
						else
							SIGN = SIGN;
							TCNT[] = TCNT[];
							AUT = S0;
							DATA[] = DATA[];
							IF (REJ[] == X"F0") THEN
								READ = VCC;
							ELSE
								READ = GND;
							END IF;
						end if;
						SIGN = SIGN;
					else
						 TCNT[] = TCNT[];
						 SIGN = SIGN;
					end if;
		when S5	=>	TMP_DATA[] = TMP_DATA[]; DATA[] = DATA[]; REJ[] = REJ[]; SIGN = SIGN; PS2_WT = VCC;
					if(REJ[] == 14) then
						OUT[] = 0;
						TCNT[] = 0;
					elsif ( (TCNT[] == 0) and (REJ[] != 10) ) THEN
						OUT[] = 1;
						TCNT[] = 0;
					else
						CASE TCNT[] IS
							WHEN 0 => OUT[] = 0; TCNT[] = 1;
							WHEN 1 => OUT[] = (REJ[1..0], 0, 0, 0, 0, 0, 0) + (REJ[2..0], 0, 0, 0, 0, 0) + (REJ[5..0], 0, 0); TCNT[] = 2;
							WHEN 2 => OUT[] = OUT[] + (REJ[4..0], 0, 0, 0) + (REJ[6..0], 0); TCNT[] = 3;
							WHEN 3 => OUT[] = OUT[] + REJ[]; 
						END CASE;
					end if;
					
					if(TCNT[] == 3) then
						AUT = S6;
					else
						AUT = S0;
					end if;
		when S6 => SIGN = SIGN; OUT[] = OUT[]; PS2_WT = VCC;
					if(SIGN == VCC) then
						if(OUT[] > 128) then
							TCNT[] = 0;
							OUT[] = 0;
							TMP_DATA[] = 0;
							AUT = S0;
						else
							TMP_DATA[] = -OUT[];
							AUT = S7;
						end if;
					else
						if(OUT[] > 127) then
							TCNT[] = 0;
							OUT[] = 0;
							TMP_DATA[] = 0;
							AUT = S0;
						else
							TMP_DATA[] = OUT[];
							AUT = S7;
						end if;
					end if;
					--AUT = S7;
		when S7	=> 	OUT[] = OUT[]; TMP_DATA[] = TMP_DATA[]; PS2_WT = GND;
					if(!PS2_IOREQ & !PS2_RD) then
						AUT = S7;
					else 					
						AUT = START;
					end if;

	end case;
	
end;
